/*
*
* Jaime Iglesias Botas (jaime.iglesias@udc.es)
* Cristina Calvo Rodríguez (cristina.calvo.rodriguez@udc.es)

* Universidade da Coruña
*
* BDA - Curso 2017-18
*
* application in Pro*C to handle a database.
*
*/

#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#define __USE_XOPEN
#include<time.h>

EXEC SQL INCLUDE SQLCA;

#define MAXLEN 50

void get_string(char *s, int maxlen){
	fgets(s,maxlen,stdin);
	int last = strlen(s) -1;
	if ( (s[last]=='\r') || (s[last]=='\n') )
	s[last] = '\0';
}

void get_password(char *s, int maxlen){
	system("stty -echo");
	get_string(s,maxlen);
	system("stty echo");
}

int get_int(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atoi(s);
}

float get_float(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atof(s);
}

/* Error handling + validation, redundant? */
int to_date(char *s, int maxlen){
	struct tm info;
	if (sscanf(s, "%d/%d/%d", &info.tm_mday, &info.tm_mon, &info.tm_year) == 3){
		char *format;
		format = "%d/%m/%Y";    //(DD/MM/YYYY)
		info.tm_year -= 1900;
		if (strftime(s, maxlen, format, &info) == 0){
			printf("There was a problem with the date\n");
			return -1;
		}
	}
	else {
		printf("Introduced date is not valid.\n");
		return -1;
	}
	return 0;
}


int menu(){
	int opcion = -1;

	int MAXOPTS = 9; /* Menu options */

	printf("\n");
	printf("Application Menu\n");
	printf("==================\n\n");

	printf("==Add functionalities==\n");
	printf("1. add tournament\n");
	printf("2. add player\n");
	printf("3. add prize\n");
	printf("4. inscribe player in tournament\n");

	printf("==Delete functionalities==\n");
	printf("5. delete tournament\n");
	printf("6. delete player\n");

	printf("==Update functionalities==\n");
	printf("7. update tournament entry price\n");

	printf("==Search functionalities==\n");
	printf("8. list tournaments that will be finished on a date\n");

	printf("==DML Combination==\n");
	printf("9. montar torneo\n");

	printf("0. Exit\n");


	while ( (opcion < 0) || (opcion > MAXOPTS)){
		printf("OP> ");
		opcion=get_int();
	}
	return opcion;
}


int exceptionHandler(int do_rollback, int table) {
	int errorcode = sqlca.sqlcode;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	switch (sqlca.sqlcode){
		/*A blank string equals to NULL for Oracle. */
	case -1400:
		/*Este error no se puede gestionar de la misma forma que el resto, utilizando la funcion strstr,
		ya que el campo sqlca.sqlerrm.sqlerrmc ocupa como máximo 70 caracteres que es menos de lo que ocupa
		nuestro mensaje, si tengo tiempo intentaré jugar un poco con los nombres de las tablas/campos/etc..
		para ver si lo consigo acortar lo suficiente.*/
		printf("Error: a mandatory field has been set as blank.\n");
		break;
		/*Foreign key does not exist.*/
	case -2291:
		/*Prize*/
		if (table == 2){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "FK_PREMIO") != NULL)
			printf("Error: specified tournament does not exist.\n");
		}
		/*Player participates in tournament*/
		if (table == 3){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "FK_JUGP1") != NULL)
			printf("Error: specified player does not exist.\n");
			else if (strstr(sqlca.sqlerrm.sqlerrmc, "FK_JUGP2") != NULL)
			printf("Error: specified tournament does not exist.\n");
		}
		break;
		/*Check violation*/
	case -2290:
		/*Tournament checks*/
		if (table == 0){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "CHECK_FECHAS") != NULL)
			printf("Error: finishing date must be higher or equal to starting date.\n");
			else if (strstr(sqlca.sqlerrm.sqlerrmc, "CHECK_TIPO") != NULL)
			printf("Error: unknown tournament type, check valid TYPES.\n");
		}
		/*Player checks*/
		if (table == 2){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "CHECK_CANTIDAD") != NULL)
			printf("Error: prize quantity must be atleast 0.\n");
			else if (strstr(sqlca.sqlerrm.sqlerrmc, "CHECK_NUM") != NULL)
			printf("Error: prize number must be higher than 0.\n");
			else if (strstr(sqlca.sqlerrm.sqlerrmc, "CHECK_CANTIDAD") != NULL)
			printf("Error: prize position must be higher than 0,\n");
		}
		break;
		/*Duplicated value for Unique field.*/
	case -1:
		/*Tournament*/
		if (table == 0){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "U_NOMBRE") != NULL)
			printf("Error: tournament name already in use.\n");
			else if (strstr(sqlca.sqlerrm.sqlerrmc, "PK_TORNEO") != NULL)
			printf("Error: tournament code already in use.\n");
		}
		/*Player*/
		if (table == 1){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "U_ALIAS") != NULL)
			printf("Error: alias already in use.\n");
			if (strstr(sqlca.sqlerrm.sqlerrmc, "PK_JUGADOR") != NULL)
			printf("Error: player DNI already in use.\n");
		}
		/*Prize*/
		if (table == 2){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "PK_PREMIO") != NULL)
			printf("Error: a prize with that number already exists for the specified tournament.\n");
		}
		/*Player participates in tournament*/
		if (table == 3){
			if (strstr(sqlca.sqlerrm.sqlerrmc, "PK_JUGP") != NULL)
			printf("Error: a player with that DNI has already been inscribed in the specified tournament.\n");
		}
		break;
		/*Unhandled errors.*/
	default:
		printf("Unhandled ERROR: %d, contact support @jaime.iglesias@udc.es : %s.", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
	}

	if (do_rollback)
	EXEC SQL ROLLBACK;

	return errorcode;
}

void connectionHandler(){
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	switch(sqlca.sqlcode){
	case -1017:
		printf("Connection error.\n");
		break;
	case -1012:
		printf("Disconnection error.\n");
		break;
	default: printf("Unhandled Error: %d, contact support.\n", sqlca.sqlcode);
	}
	EXEC SQL ROLLBACK RELEASE;
	exit(2);
}

void connectBD(){
	EXEC SQL WHENEVER SQLERROR DO connectionHandler();

	printf("Connecting to Oracle...\n");

	EXEC SQL BEGIN DECLARE SECTION;
	char username[MAXLEN];
	char password[MAXLEN];
	EXEC SQL END DECLARE SECTION;

	printf("User: ");
	get_string(username, MAXLEN);

	printf("Password: ");
	get_password(password, MAXLEN);

	EXEC SQL CONNECT :username IDENTIFIED BY :password;

}

void disconnectBD(){
	EXEC SQL WHENEVER SQLERROR DO connectionHandler();
	EXEC SQL COMMIT RELEASE;
	printf("Disconnected.\n");
}


void add_tournament(){
	printf("New tournament().\n");

	int error= 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 0);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO[10];
	char NOMBRE_TORNEO[51];
	char F_INICIO[15];
	char F_FIN[15];
	float ENTRADA;
	short entrada_ind = 0;
	char TIPO_TORNEO[15];
	EXEC SQL END DECLARE SECTION;

	printf("Tournament code: ");
	get_string(COD_TORNEO, 10);

	printf("Tournament name: ");
	get_string(NOMBRE_TORNEO,50);

	printf("Starting date, FORMAT: (DD/MM/YYYY): ");
	get_string(F_INICIO, 15);
	if (to_date(F_INICIO, 15)){
		return;
	}


	printf("Finishing date, FORMAT: (DD/MM/YYYY): ");
	get_string(F_FIN, 15);
	if (to_date(F_FIN, 15)){
		return;
	}

	printf("Do you want to set inscription price as blank?: Yes -1 / No 0: ");
	entrada_ind = get_int();
	if(entrada_ind != (-1)) {
		printf("Inscription price: ");
		ENTRADA = get_float();
	}

	printf("Tournament type:");
	get_string(TIPO_TORNEO, 15);

	printf("\n");
	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	EXEC SQL INSERT INTO TORNEO (COD_TORNEO, NOMBRE_TORNEO, F_INICIO, F_FIN, ENTRADA, TIPO_TORNEO)
	VALUES (:COD_TORNEO, :NOMBRE_TORNEO, to_date(:F_INICIO, 'dd/mm/yyyy'), to_date(:F_FIN, 'dd/mm/yyyy'), :ENTRADA :entrada_ind, :TIPO_TORNEO);

	if (error){
		printf("Error while adding tournament.\n");
	} else{
		printf("tournament added succesfully.\n");
		EXEC SQL COMMIT;
	}
}

void add_player(){
	printf("New Player().\n");

	int error= 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 1);

	EXEC SQL BEGIN DECLARE SECTION;
	char DNI_JUGADOR[10];
	char NOMBRE_JUGADOR[30];
	char APELLIDO1[30];
	char APELLIDO2[30];
	short apellido2_ind = 0;
	char ALIAS[31];
	char F_NAC[15];
	short nacimiento_ind = 0;
	EXEC SQL END DECLARE SECTION;

	printf("DNI: ");
	get_string(DNI_JUGADOR, 10);

	printf("Player name: ");
	get_string(NOMBRE_JUGADOR,30);

	printf("Fist last name: ");
	get_string(APELLIDO1,30);

	printf("Do you want to set the second last name as blank?: Yes -1 / No 0: ");
	apellido2_ind = get_int();
	if(apellido2_ind != (-1)) {
		printf("Second last name: ");
		get_string(APELLIDO2, 30);
	}

	printf("Alias: ");
	get_string(ALIAS, 31);


	printf("Do you want to set the birthdate as blank: Yes -1 / No 0: ");
	nacimiento_ind = get_int();
	if(nacimiento_ind != (-1)) {
		printf("birthdate format (DD/MM/YYYY): ");
		get_string(F_NAC, 15);
		if (to_date(F_NAC, 15)){
			return;
		}
	}

	printf("\n");
	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	EXEC SQL INSERT INTO JUGADOR (DNI_JUGADOR, NOMBRE_JUGADOR, APELLIDO1, APELLIDO2, ALIAS, F_NAC)
	VALUES (:DNI_JUGADOR, :NOMBRE_JUGADOR, :APELLIDO1, :APELLIDO2 :apellido2_ind, :ALIAS, to_date(:F_NAC:nacimiento_ind, 'dd/mm/yyyy'));

	if (error){
		printf("Error adding player.\n");
	} else{
		printf("Player added succesfully.\n");
		EXEC SQL COMMIT;
	}
}


void add_prize(){
	printf("New prize().\n");

	int error= 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 2);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO[10];
	int NUM_PREMIO;
	int POSICION;
	int CANTIDAD;
	EXEC SQL END DECLARE SECTION;

	printf("Tournament code: ");
	get_string(COD_TORNEO, 10);

	printf("prize number: ");
	NUM_PREMIO = get_int();

	printf("prize position: ");
	POSICION = get_int();

	printf("Prize quantity: ");
	CANTIDAD = get_int();

	printf("\n");
	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	EXEC SQL INSERT INTO PREMIO (COD_TORNEO, NUM_PREMIO, POSICION, CANTIDAD)
	VALUES (:COD_TORNEO, :NUM_PREMIO, :POSICION, :CANTIDAD);

	if (error){
		printf("Error while adding prize.\n");
	} else{
		printf("prize added succesfully.\n");
		EXEC SQL COMMIT;
	}
}

int dummieException(int error){
	return error;
}

int get_tournamentDate(char *tournamentCode, int dateLength){
	struct tm info;
	time_t t;
	time_t now;
	int error = 0;

	EXEC SQL WHENEVER NOT FOUND DO error = dummieException(1);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO[10];
	char F_INICIO[15];
	EXEC SQL END DECLARE SECTION;

	strcpy(COD_TORNEO, tournamentCode);

	EXEC SQL SET TRANSACTION READ ONLY;
	EXEC SQL SELECT to_char(F_INICIO, 'dd/mm/yyyy')
	INTO :F_INICIO
	FROM TORNEO
	WHERE COD_TORNEO = :COD_TORNEO;

	if (!error){
		if (strptime(F_INICIO, "%d/%m/%Y", &info)){
			t = mktime(&info);
			time(&now);
			if (difftime(t, now) < 0){
				error = -1;
			}
		} else {
			error = -1;
		}
	}

	EXEC SQL COMMIT;
	return error;
}

void add_inscribePlayer(){
	printf("inscribe player in tournament.\n");

	int error = 0;
	int aux = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 3);

	EXEC SQL BEGIN DECLARE SECTION;
	char DNI_JUGADOR[10];
	char COD_TORNEO[10];
	int POSICION_FINAL;
	short posicionFinal_ind = -1;
	EXEC SQL END DECLARE SECTION;

	printf("DNI: ");
	get_string(DNI_JUGADOR, 10);

	printf("tournament code: ");
	get_string(COD_TORNEO, 10);

	aux = get_tournamentDate(COD_TORNEO, 15);
	if ( aux == 1){
		printf("Error: the specified tournament does not exist.\n");
		error = 1;
	}
	else if ( aux == -1){
		printf("Error: a player cannot be inscribed in a tournament that has already started.\n");
		error = 1;
	}

	printf("\n");
	if (!error){
		EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		EXEC SQL INSERT INTO JUGADOR_PARTICIPA (DNI_JUGADOR, COD_TORNEO, POSICION_FINAL)
		VALUES (:DNI_JUGADOR, :COD_TORNEO, :POSICION_FINAL :posicionFinal_ind);
	}

	if (error){
		printf("Error inscribing player.\n");
	} else {
		printf("player inscribed succesfully.\n");
		EXEC SQL COMMIT;
	}
}

void list_tournaments(){
	printf("list tournaments have finished by the  selected date\n");

	int error = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 0);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO [10];
	char NOMBRE_TORNEO [51];
	char F_INICIO [15];
	char F_FIN [15];
	float ENTRADA;
	short entrada_ind = 0;
	char TIPO_TORNEO[15];
	EXEC SQL END DECLARE SECTION;

	printf("finishing date, FORMAT: (DD/MM/YYYY): ");
	get_string(F_FIN, 15);
	if ( to_date(F_FIN, 15))
	return;

	EXEC SQL SET TRANSACTION READ ONLY;

	EXEC SQL DECLARE cursor_torneos CURSOR FOR
	SELECT COD_TORNEO, NOMBRE_TORNEO, to_char(F_INICIO, 'dd/mm/yyyy'), to_char(F_FIN, 'dd/mm/yyyy'), ENTRADA, TIPO_TORNEO
	FROM TORNEO
	WHERE F_FIN < to_date(:F_FIN, 'dd/mm/yyyy');

	EXEC SQL OPEN cursor_torneos;

	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	while(1) {
		EXEC SQL FETCH cursor_torneos
		INTO :COD_TORNEO, :NOMBRE_TORNEO, :F_INICIO, :F_FIN, :ENTRADA:entrada_ind, :TIPO_TORNEO;

		if (entrada_ind==0)
		printf("Tournament Code: %s, Tournament Name: %s, Starting Date: %s, Finishing Date: %s, Inscription: %2.f, type: %s\n", COD_TORNEO, NOMBRE_TORNEO, F_INICIO, F_FIN, ENTRADA, TIPO_TORNEO);
		else
		printf("Tournament Code: %s, Tournament Name: %s, Starting Date: %s, Finishing Date: %s, No Inscription, type: %s\n", COD_TORNEO, NOMBRE_TORNEO, F_INICIO, F_FIN, TIPO_TORNEO);
	}

	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL CLOSE cursor_torneos;

	if (sqlca.sqlerrd[2] == 0)
	printf("there are no tournaments that have finished  by the specified date.\n");
	else
	printf("%d tournaments were found.\n", sqlca.sqlerrd[2]);

	EXEC SQL COMMIT;
}

void update_tournamentPrize(){
	printf("change tournament entry price.\n");

	int error = 0;
	int aux = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 0);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO [10];
	float ENTRADA;
	short entrada_ind = 0;
	EXEC SQL END DECLARE SECTION;

	printf("tournament code: ");
	get_string(COD_TORNEO, 10);

	printf("new entry price: ");
	ENTRADA = get_float();

	aux = get_tournamentDate(COD_TORNEO, 15);
	if ( aux == 1){
		printf("Error: the specified tournament does not exist.\n");
		error = 1;
	}
	else if ( aux == -1){
		printf("Error: cannot change the entry price on a tournament that has already started.\n");
		error = 1;
	}

	printf("\n");
	if (!error){
		EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

		EXEC SQL UPDATE TORNEO SET ENTRADA = :ENTRADA
		WHERE COD_TORNEO = :COD_TORNEO;
	}

	if (error){
		printf("error updating tournament entry price.\n");
	}
	else {
		printf("tournament entry price updated succesfully.\n");
		EXEC SQL COMMIT;
	}
}

void delete_tournament() {
	printf("delete tournament.\n");

	int error = 0;
	int aux = 0;
	int delete = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 0);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO[10];
	EXEC SQL END DECLARE SECTION;

	printf("tournament code for deleting: ");
	get_string(COD_TORNEO, 10);

	aux = get_tournamentDate(COD_TORNEO, 15);
	if ( aux == 1){
		printf("Error: the specified tournament does not exist.\n");
		error = 1;
	}
	else if ( aux == -1){
		printf("Error: cannot delete a tournament that has already started.\n");
		error = 1;
	}

	if(!error){
		printf("deleting the tournament will also delete the prizes and the inscriptions, continue?: 1 Yes, 0 No");
		delete = get_int();
	}

	printf("\n");
	if (error == 0 && delete == 1){
		EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		EXEC SQL DELETE FROM TORNEO WHERE COD_TORNEO = :COD_TORNEO;
	}

	if (error || !delete){
		printf("error while deleting tournament.\n");
	} else{
		printf("tournament deleted succesfully.\n");
		EXEC SQL COMMIT;
	}
}

int get_tournamentPlayer(char *dni){

	int error = 0;
	int loop = 1;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 3);

	EXEC SQL BEGIN DECLARE SECTION;
	char COD_TORNEO[10];
	char DNI_JUGADOR[10];
	EXEC SQL END DECLARE SECTION;

	strcpy(DNI_JUGADOR, dni);

	/* Conflict when calling inner transaction.*/
	//EXEC SQL SET TRANSACTION READ ONLY;

	EXEC SQL DECLARE cursor_tourP CURSOR FOR
	SELECT COD_TORNEO
	FROM JUGADOR_PARTICIPA
	WHERE DNI_JUGADOR = :DNI_JUGADOR;

	EXEC SQL OPEN cursor_tourP;

	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	while(loop) {
		EXEC SQL FETCH cursor_tourP
		INTO :COD_TORNEO;
		error = get_tournamentDate(COD_TORNEO, 15);
	}

	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL CLOSE cursor_tourP;

	if (sqlca.sqlerrd[2] == 0){
		error = 0;
	}

	EXEC SQL COMMIT;

	return error;
}

void delete_player(){
	printf("delete player.\n");

	int error= 0;
	int delete = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 1);

	EXEC SQL BEGIN DECLARE SECTION;
	char DNI_JUGADOR[10];
	EXEC SQL END DECLARE SECTION;

	printf("Introduce DNI to delete: ");
	get_string(DNI_JUGADOR, 10);

	error = get_tournamentPlayer(DNI_JUGADOR);
	if (error)
	printf("Error: cannot delete a player who is inscribed in a tournament that has already started.\n");

	if(!error){
		printf("deleting the player will also delete all his tournament inscriptions, continue? Yes: 1, No: 0");
		delete = get_int();
	}

	if(!error && delete){
		EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		EXEC SQL DELETE FROM JUGADOR WHERE DNI_JUGADOR = :DNI_JUGADOR;
	}

	if (error){
		printf("Error while deleting player.\n");
	} else{
		printf("Player deleted succesfully.\n");
		EXEC SQL COMMIT;
	}
}

void mount_tournament(){

	int error = 0;
	int add = 0;
	struct tm info;
	time_t t;
	time_t now;
	int position = 0;

	EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 0);

	EXEC SQL BEGIN DECLARE SECTION;

	char COD_TORNEO[10];
	char NOMBRE_TORNEO[51];
	char F_INICIO[15];
	char F_FIN[15];
	float ENTRADA;
	short entrada_ind = 0;
	char TIPO_TORNEO[15];

	char DNI_JUGADOR[10];
	char NOMBRE_JUGADOR[30];
	char APELLIDO1[30];
	char APELLIDO2[30];
	short apellido2_ind = 0;
	char ALIAS[31];
	char F_NAC[15];
	short nacimiento_ind = 0;

	int POSICION_FINAL;
	short posicionFinal_ind = -1;
	EXEC SQL END DECLARE SECTION;

	printf("Tournament code: ");
	get_string(COD_TORNEO, 10);

	printf("Tournament name: ");
	get_string(NOMBRE_TORNEO,50);

	printf("Starting date, FORMAT: (DD/MM/YYYY): ");
	get_string(F_INICIO, 15);
	if (to_date(F_INICIO, 15)){
		return;
	}

	printf("Finishing date, FORMAT: (DD/MM/YYYY): ");
	get_string(F_FIN, 15);
	if (to_date(F_FIN, 15)){
		return;
	}

	printf("Do you want to set inscription price as blank?: Yes -1 / No 0: ");
	entrada_ind = get_int();
	if(entrada_ind != (-1)) {
		printf("Inscription price: ");
		ENTRADA = get_float();
	}

	printf("Tournament type:");
	get_string(TIPO_TORNEO, 15);

	printf("\n");
	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

	EXEC SQL INSERT INTO TORNEO (COD_TORNEO, NOMBRE_TORNEO, F_INICIO, F_FIN, ENTRADA, TIPO_TORNEO)
	VALUES (:COD_TORNEO, :NOMBRE_TORNEO, to_date(:F_INICIO, 'dd/mm/yyyy'), to_date(:F_FIN, 'dd/mm/yyyy'), :ENTRADA :entrada_ind, :TIPO_TORNEO);

	while (1 && !error) {
		printf("Do you want to add players to this tournament?: 1 Yes, 0 No ");
		add = get_int();

		if (!add)
		break;

		error = 0;

		EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 1);

		printf("DNI: ");
		get_string(DNI_JUGADOR, 10);

		printf("Player name: ");
		get_string(NOMBRE_JUGADOR,30);

		printf("Fist last name: ");
		get_string(APELLIDO1,30);

		printf("Do you want to set the second last name as blank?: Yes -1 / No 0: ");
		apellido2_ind = get_int();
		if(apellido2_ind != (-1)) {
			printf("Second last name: ");
			get_string(APELLIDO2, 30);
		}

		printf("Alias: ");
		get_string(ALIAS, 31);


		printf("Do you want to set the birthdate as blank: Yes -1 / No 0: ");
		nacimiento_ind = get_int();
		if(nacimiento_ind != (-1)) {
			printf("birthdate format (DD/MM/YYYY): ");
			get_string(F_NAC, 15);
			if (to_date(F_NAC, 15)){
				error = 99999;
			}
		}

		/* Has the tournament ended? */
		if (strptime(F_FIN, "%d/%m/%Y", &info)){
			t = mktime(&info);
			time(&now);
			if (difftime(t, now) > 0){
				position = 1;
			}
		} else {
			position = 1;
		}
		if (position){
			printf("Did this player play the tournament?: -1 Yes, 0 No");
			posicionFinal_ind = get_int();
			if (posicionFinal_ind == -1){
				printf("In which position did he end?: ");
				POSICION_FINAL = get_int();
			}
		}

		printf("\n");
		if (!error){
			EXEC SQL INSERT INTO JUGADOR (DNI_JUGADOR, NOMBRE_JUGADOR, APELLIDO1, APELLIDO2, ALIAS, F_NAC)
			VALUES (:DNI_JUGADOR, :NOMBRE_JUGADOR, :APELLIDO1, :APELLIDO2 :apellido2_ind, :ALIAS, to_date(:F_NAC:nacimiento_ind, 'dd/mm/yyyy'));
		}

		EXEC SQL WHENEVER SQLERROR DO error = exceptionHandler(1, 3);

		if(!error){
			EXEC SQL INSERT INTO JUGADOR_PARTICIPA (DNI_JUGADOR, COD_TORNEO, POSICION_FINAL)
			VALUES (:DNI_JUGADOR, :COD_TORNEO, :POSICION_FINAL :posicionFinal_ind);
		}

	}

	if (error)
	printf("error mounting the tournament.\n");
	else{
		printf("tournament mounted succesfully.\n");
		EXEC SQL COMMIT;
	}
}

int main(){
	connectBD();

	int op;

	while ( (op=menu()) != 0){
		switch(op){
		case 1: add_tournament(); break;
		case 2: add_player(); break;
		case 3: add_prize(); break;
		case 4: add_inscribePlayer(); break;
		case 5: delete_tournament(); break;
		case 6: delete_player(); break;
		case 7: update_tournamentPrize(); break;
		case 8: list_tournaments(); break;
		case 9: mount_tournament(); break;
		}

	}

	disconnectBD();
	return 0;
}
