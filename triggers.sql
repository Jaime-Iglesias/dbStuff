/*-- drop tables

	DROP TABLE JUGADOR_LOGIN;
	DROP TABLE JUGADOR_PERSONAL;
	DROP TABLE TORNEO_FREEZEOUT;
	DROP TABLE TORNEO_FREEROLL;
	DROP TABLE PREMIO_FREEZEOUT;
	DROP TABLE PREMIO_FREEROLL;
	DROP TABLE JUGADOR_PARTICIPA_FREEZEOUT;
	DROP TABLE JUGADOR_PARTICIPA_FREEROLL;
*/

-- tables

	CREATE TABLE JUGADOR_LOGIN(
		DNI_JUGADOR VARCHAR(9),
		LOGIN_JUGADOR VARCHAR(15) NOT NULL,
		CONTRASEÑA_JUGADOR VARCHAR(15) NOT NULL,
		CONSTRAINT PK_JUGADOR PRIMARY KEY (DNI_JUGADOR),
		--CONSTRAINT LOGIN_UNIQUE UNIQUE (LOGIN_JUGADOR)
	);

	CREATE TABLE JUGADOR_PERSONAL(
		DNI_JUGADOR VARCHAR(9),
		NOMBRE_JUGADOR VARCHAR(30) NOT NULL,
		ALIAS_JUGADOR VARCHAR(30) NOT NULL,
		F_NACIMIENTO DATE NOT NULL,
		--CONSTRAINT ALIAS_UNIQUE UNIQUE (ALIAS_JUGADOR),
		CONSTRAINT FK_JUGADOR FOREIGN KEY (DNI_JUGADOR) REFERENCES JUGADOR_LOGIN (DNI_JUGADOR) ON DELETE CASCADE
	);

	CREATE TABLE TORNEO_FREEZEOUT(
		COD_TORNEO INT,
		NOMBRE_TORNEO VARCHAR(50) NOT NULL,
		F_INICIO DATE NOT NULL,
		F_FIN DATE NOT NULL,
		ENTRADA NUMBER(6),
		TIPO_TORNEO CHAR(9),
		--CONSTRAINT U_NOMBRE_FZ  UNIQUE (NOMBRE_TORNEO),
		CONSTRAINT CHECK_TIPO_FZ CHECK (TIPO_TORNEO =  'FREEZEOUT'),
		CONSTRAINT PK_TORNEO_FZ PRIMARY KEY(COD_TORNEO)
	);

	CREATE TABLE TORNEO_FREEROLL(
		COD_TORNEO INT,
		NOMBRE_TORNEO VARCHAR(50) NOT NULL,
		F_INICIO DATE NOT NULL,
		F_FIN DATE NOT NULL,
		ENTRADA NUMBER(6),
		TIPO_TORNEO CHAR(9),
		--CONSTRAINT U_NOMBRE_FR UNIQUE (NOMBRE_TORNEO),
		CONSTRAINT CHECK_TIPO_FR CHECK (TIPO_TORNEO = 'FREEROLLS'),
		CONSTRAINT PK_TORNEO_FR PRIMARY KEY(COD_TORNEO)
	);

	CREATE TABLE PREMIO_FREEZEOUT(
		COD_TORNEO INT,
		POSICION NUMBER(3) NOT NULL,
		CANTIDAD NUMBER(12) NOT NULL,
		CONSTRAINT FK_PREMIO_FZ FOREIGN KEY (COD_TORNEO) REFERENCES TORNEO_FREEZEOUT(COD_TORNEO) ON DELETE CASCADE,
		CONSTRAINT PK_PREMIO_FZ PRIMARY KEY (COD_TORNEO, POSICION)
	);

	CREATE TABLE PREMIO_FREEROLL(
		COD_TORNEO INT,
		POSICION NUMBER(3) NOT NULL,
		CANTIDAD NUMBER(12) NOT NULL,
		CONSTRAINT FK_PREMIO_FR FOREIGN KEY (COD_TORNEO) REFERENCES TORNEO_FREEROLL(COD_TORNEO) ON DELETE CASCADE,
		CONSTRAINT PK_PREMIO_FR PRIMARY KEY (COD_TORNEO, POSICION)
	);

	CREATE TABLE JUGADOR_PARTICIPA_FREEZEOUT(
		DNI_JUGADOR VARCHAR(9),
		COD_TORNEO INT,
		POSICION_FINAL NUMBER(3se),
		CONSTRAINT PK_JP_FZ PRIMARY KEY (DNI_JUGADOR, COD_TORNEO),
		CONSTRAINT FK_JP_FZ_DNI FOREIGN KEY (DNI_JUGADOR) REFERENCES JUGADOR_LOGIN (DNI_JUGADOR) ON DELETE CASCADE,
		CONSTRAINT FK_JP_FZ_COD FOREIGN KEY (COD_TORNEO) REFERENCES TORNEO_FREEZEOUT (COD_TORNEO) ON DELETE CASCADE
	);

	CREATE TABLE JUGADOR_PARTICIPA_FREEROLL(
		DNI_JUGADOR VARCHAR(9),
		COD_TORNEO INT,
		POSICION_FINAL NUMBER(3),
		CONSTRAINT PK_JP_FR PRIMARY KEY (DNI_JUGADOR, COD_TORNEO),
		CONSTRAINT FK_JP_FR_DNI FOREIGN KEY (DNI_JUGADOR) REFERENCES JUGADOR_LOGIN (DNI_JUGADOR) ON DELETE CASCADE,
		CONSTRAINT FK_JP_FR_COD FOREIGN KEY (COD_TORNEO) REFERENCES TORNEO_FREEROLL (COD_TORNEO) ON DELETE CASCADE
	);

-- views

	CREATE VIEW JUGADOR AS
	SELECT JUGADOR_LOGIN.DNI_JUGADOR, NOMBRE_JUGADOR, ALIAS_JUGADOR, F_NACIMIENTO, LOGIN_JUGADOR, CONTRASEÑA_JUGADOR FROM JUGADOR_LOGIN JOIN JUGADOR_PERSONAL
	ON JUGADOR_LOGIN.DNI_JUGADOR = JUGADOR_PERSONAL.DNI_JUGADOR;

	CREATE VIEW TORNEO AS
	SELECT * FROM TORNEO_FREEZEOUT
	UNION ALL
	SELECT * FROM TORNEO_FREEROLL;

	CREATE VIEW PREMIO AS
	SELECT * FROM PREMIO_FREEZEOUT
	UNION ALL
	SELECT * FROM PREMIO_FREEROLL;

	CREATE VIEW JUGADOR_PARTICIPA AS
	SELECT * FROM JUGADOR_PARTICIPA_FREEZEOUT
	UNION ALL
	SELECT * FROM JUGADOR_PARTICIPA_FREEROLL;

-- identifiers

	CREATE SEQUENCE seq_torneo
	START WITH 1
	INCREMENT BY 1
	NOCYCLE;

-- triggers

	-- triggers jugador

		-- insert

		CREATE OR REPLACE TRIGGER t_insert_jugador
		INSTEAD OF INSERT ON JUGADOR
		FOR EACH ROW
		DECLARE
				n NUMBER;
		BEGIN

			/*-- intentar insertar un jugador que existe.

			SELECT COUNT(*) INTO n FROM JUGADOR_LOGIN
			WHERE DNI_JUGADOR = :new.DNI_JUGADOR;
			
			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20036, 'Jugador ya existe');
			END IF;
			*/

			-- intnetar insertar un jugador con un alias cogido

			SELECT COUNT(*) INTO n FROM JUGADOR_PERSONAL
			WHERE ALIAS_JUGADOR = :new.ALIAS_JUGADOR;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'Alias ya existe');
			END IF;

			-- intentar insertar un jugador con un login cogido

			SELECT COUNT(*) INTO n FROM JUGADOR_LOGIN
			WHERE LOGIN_JUGADOR = :new.LOGIN_JUGADOR;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'Login ya existe');
			END IF;

			-- todo correcto, insert

			INSERT INTO JUGADOR_LOGIN(DNI_JUGADOR, LOGIN_JUGADOR, CONTRASEÑA_JUGADOR)
			VALUES (:new.DNI_JUGADOR, :new.LOGIN_JUGADOR, :new.CONTRASEÑA_JUGADOR);

			INSERT INTO JUGADOR_PERSONAL(DNI_JUGADOR, NOMBRE_JUGADOR, ALIAS_JUGADOR, F_NACIMIENTO)
			VALUES (:new.DNI_JUGADOR, :new.NOMBRE_JUGADOR, :new.ALIAS_JUGADOR, :new.F_NACIMIENTO);
		END;
		/

		-- delete

		CREATE OR REPLACE TRIGGER t_delete_jugador
		INSTEAD OF DELETE ON JUGADOR
		FOR EACH ROW
		BEGIN
			DELETE FROM JUGADOR_LOGIN
			WHERE DNI_JUGADOR = :old.DNI_JUGADOR;
		END;
		/

		-- update

		CREATE OR REPLACE TRIGGER t_update_jugador
		INSTEAD OF UPDATE ON JUGADOR
		FOR EACH ROW
		DECLARE
				n NUMBER;
		BEGIN

			-- intentar cambiar el DNI.

			IF (:new.DNI_JUGADOR != :old.DNI_JUGADOR) THEN
				RAISE_APPLICATION_ERROR(-20001, 'No se puede modificar el DNI de un jugador');
			END IF;

			-- intentar cambiar el alias por uno cogido.

			SELECT COUNT(*) INTO n FROM JUGADOR_PERSONAL
			WHERE ALIAS_JUGADOR = :new.ALIAS_JUGADOR;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El alias ya existe');
			END IF;

			-- intentar cambiar login por uno cogido.

			SELECT COUNT(*) INTO n FROM JUGADOR_LOGIN
			WHERE LOGIN_JUGADOR = :new.LOGIN_JUGADOR;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El login ya existe');
			END IF;
			
			-- todo correcto, hacer update

			UPDATE JUGADOR_PERSONAL SET
				NOMBRE_JUGADOR = :new.NOMBRE_JUGADOR,
				ALIAS_JUGADOR = :new.ALIAS_JUGADOR,
				F_NACIMIENTO = :new.F_NACIMIENTO
			WHERE DNI_JUGADOR = :old.DNI_JUGADOR;

			UPDATE JUGADOR_LOGIN SET
				LOGIN_JUGADOR = :new.LOGIN_JUGADOR,
				CONTRASEÑA_JUGADOR = :new.CONTRASEÑA_JUGADOR
			WHERE DNI_JUGADOR = :old.DNI_JUGADOR;
		END;
		/
		
	-- triggers torneo

		-- insert

		CREATE OR REPLACE TRIGGER t_insert_torneo
		INSTEAD OF INSERT ON TORNEO
		FOR EACH ROW
		DECLARE
				n NUMBER;
				COD_TORNEO INTEGER(3);
		BEGIN

			-- intentar insertar torneo con nombre existente
			
			SELECT COUNT(*) INTO n FROM TORNEO_FREEZEOUT
			WHERE NOMBRE_TORNEO = :new.NOMBRE_TORNEO;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El nombre de torneo ya existe');
			END IF;
			
			-- intentar insertar torneo con nombre existente

			SELECT COUNT(*) INTO n FROM TORNEO_FREEROLL
			WHERE NOMBRE_TORNEO = :new.NOMBRE_TORNEO;

			IF n > 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El nombre de torneo ya existe');
			END IF;
			
			-- es FREEZEOUT

			IF (:new.TIPO_TORNEO = 'FREEZEOUT') THEN

				-- todo correcto, insert

				SELECT seq_torneo.nextval INTO COD_TORNEO FROM DUAL;
				INSERT INTO TORNEO_FREEZEOUT(COD_TORNEO, NOMBRE_TORNEO,F_INICIO, F_FIN, ENTRADA, TIPO_TORNEO)
				VALUES(COD_TORNEO, :new.NOMBRE_TORNEO, :new.F_INICIO, :new.F_FIN, :new.ENTRADA, 'FREEZEOUT');

				-- es FREEROLLS

			ELSIF (:new.TIPO_TORNEO = 'FREEROLLS') THEN

				-- todo correcto, insert

				SELECT seq_torneo.nextval INTO COD_TORNEO FROM DUAL;
				INSERT INTO TORNEO_FREEROLL(COD_TORNEO, NOMBRE_TORNEO,F_INICIO, F_FIN, ENTRADA, TIPO_TORNEO)
				VALUES(COD_TORNEO, :new.NOMBRE_TORNEO, :new.F_INICIO, :new.F_FIN, :new.ENTRADA, 'FREEROLLS');

				-- no es valido

			ELSE
				RAISE_APPLICATION_ERROR(-20001, 'Tipo de torneo invalido');
			END IF;
		END;
		/

		-- delete

		CREATE OR REPLACE TRIGGER t_delete_torneo
		INSTEAD OF DELETE ON TORNEO
		FOR EACH ROW
		BEGIN
			IF (:old.TIPO_TORNEO = 'FREEZEOUT') THEN
				DELETE FROM TORNEO_FREEZEOUT WHERE COD_TORNEO = :old.COD_TORNEO;
			ELSE
				DELETE FROM TORNEO_FREEROLL WHERE COD_TORNEO = :old.COD_TORNEO;
			END IF;
		END;
		/

		-- update

		CREATE OR REPLACE TRIGGER t_update_torneo
		INSTEAD OF UPDATE ON TORNEO
		FOR EACH ROW
		DECLARE
				n NUMBER;
		BEGIN

			-- intentar modificar el codigo del torneo

			IF :new.COD_TORNEO != :old.COD_TORNEO THEN
				RAISE_APPLICATION_ERROR(-20001, 'No se puede modificar el codigo del torneo');
			END IF;

			-- intentar cambiar el tipo de torneo

			IF :new.TIPO_TORNEO != :old.TIPO_TORNEO THEN
				RAISE_APPLICATION_ERROR(-20001, 'No se puede modificar el tipo de  torneo');
			END IF;

			-- es FREEZEOUT

			IF (:old.TIPO_TORNEO = 'FREEZEOUT') THEN

				-- El nuevo nombre ya existe?

				SELECT COUNT(*) INTO n FROM TORNEO_FREEZEOUT
				WHERE NOMBRE_TORNEO = :new.NOMBRE_TORNEO;
				IF n > 0 THEN
					RAISE_APPLICATION_ERROR(-20001, 'El nombre de torneo ya existe');
				END IF;

				-- todo correcto, update

				UPDATE TORNEO_FREEZEOUT SET
					NOMBRE_TORNEO = :new.NOMBRE_TORNEO,
					F_INICIO = :new.F_INICIO,
					F_FIN = :new.F_FIN,
					ENTRADA = :new.ENTRADA
				WHERE COD_TORNEO = :old.COD_TORNEO;

				-- es FREEROLL

			ELSE

				-- El nuevo nombre ya existe?

				SELECT COUNT(*) INTO n FROM TORNEO_FREEROLL
				WHERE NOMBRE_TORNEO = :new.NOMBRE_TORNEO;
				IF n > 0 THEN
					RAISE_APPLICATION_ERROR(-20001, 'El nombre de torneo ya existe');
				END IF;

				-- todo correcto, update

				UPDATE TORNEO_FREEROLL SET
					NOMBRE_TORNEO = :new.NOMBRE_TORNEO,
					F_INICIO = :new.F_INICIO,
					F_FIN = :new.F_FIN,
					ENTRADA = :new.ENTRADA
				WHERE COD_TORNEO = :old.COD_TORNEO;

			END IF;
		END;
		/
	
	-- premio
	
		-- insert
		
		CREATE OR REPLACE TRIGGER t_insert_premio
		INSTEAD OF INSERT ON PREMIO
		FOR EACH ROW
		DECLARE
			t1 NUMBER;
			t2 NUMBER;
		BEGIN
		
			-- existe el torneo?
			
			SELECT COUNT(*) INTO t1 FROM TORNEO_FREEZEOUT
			WHERE COD_TORNEO = :new.COD_TORNEO;
			
			SELECT COUNT(*) INTO t2 FROM TORNEO_FREEROLL
			WHERE COD_TORNEO = :new.COD_TORNEO;
			
			IF (t1 = 0) AND (t2 = 0) THEN
				RAISE_APPLICATION_ERROR(-20001, 'El torneo no existe');
			END IF;
			
			-- es FREEZEOUT
			IF (t1 > 0 ) THEN
				INSERT INTO PREMIO_FREEZEOUT(COD_TORNEO, POSICION, CANTIDAD)
				VALUES(:new.COD_TORNEO, :new.POSICION, :new.CANTIDAD);
			-- es FREEROLL
			ELSE
				INSERT INTO PREMIO_FREEROLL(COD_TORNEO, POSICION, CANTIDAD)
				VALUES(:new.COD_TORNEO, :new.POSICION, :new.CANTIDAD);
			END IF;
			
		END;
		/
		
		-- delete
		
		CREATE OR REPLACE TRIGGER t_delete_premio
		INSTEAD OF DELETE ON PREMIO
		FOR EACH ROW
		DECLARE
			n NUMBER;
		BEGIN
		
			-- buscamos el fragmento al que se corresponde
			SELECT COUNT(*) INTO n FROM TORNEO_FREEZEOUT WHERE COD_TORNEO = :old.COD_TORNEO;
			
			IF (n > 0) THEN
				DELETE FROM PREMIO_FREEZEOUT WHERE (COD_TORNEO = :old.COD_TORNEO ) AND (POSICION = :old.POSICION);
			ELSE
				DELETE FROM PREMIO_FREEROLL WHERE (COD_TORNEO = :old.COD_TORNEO ) AND (POSICION = :old.POSICION);
			END IF;
		END;
		/
		
		-- update
		
		CREATE OR REPLACE TRIGGER t_update_premio
		INSTEAD OF UPDATE ON PREMIO
		FOR EACH ROW
		DECLARE
			n NUMBER;
		BEGIN
			
			-- intentar cambiar el torneo
			
			IF (:new.COD_TORNEO != :old.COD_TORNEO) THEN
				RAISE_APPLICATION_ERROR(-20001, 'No se puede modificar el COD_TORNEO');
			END IF;
						
			SELECT COUNT(*) INTO n FROM TORNEO_FREEZEOUT
			WHERE COD_TORNEO = :old.COD_TORNEO;
			
			-- es FREEZEOUT
			IF n > 0 THEN
			
				-- modificar la posición solo si no existe otra igual.
				
				IF (:new.POSICION != :old.POSICION) THEN
				
					SELECT COUNT(*) INTO n FROM PREMIO_FREEZEOUT
					WHERE POSICION = :new.POSICION;
					
					IF n > 0 THEN
						RAISE_APPLICATION_ERROR(-20001, 'Ese premio ya existe para el torneo');
					END IF;
			
				END IF;
				
				UPDATE PREMIO_FREEZEOUT SET
					POSICION = :new.POSICION,
					CANTIDAD = :new.CANTIDAD
				WHERE (COD_TORNEO = :old.COD_TORNEO ) AND (POSICION = :old.POSICION);	
				
			-- es FREEROLL	
			ELSE
				IF (:new.POSICION != :old.POSICION) THEN
				
					SELECT COUNT(*) INTO n FROM PREMIO_FREEROLL
					WHERE POSICION = :new.POSICION;
					
					IF n > 0 THEN
						RAISE_APPLICATION_ERROR(-20001, 'Ese premio ya existe para el torneo');
					END IF;
			
				END IF;
				
				UPDATE PREMIO_FREEROLL SET
					POSICION = :new.POSICION,
					CANTIDAD = :new.CANTIDAD
				WHERE (COD_TORNEO = :old.COD_TORNEO ) AND (POSICION = :old.POSICION);			
				
			END IF;
		END;
		/	
		
	-- triggers jugador_participa
	
		-- insert
			CREATE OR REPLACE TRIGGER t_insert_jugador_participa
			INSTEAD OF INSERT ON JUGADOR_PARTICIPA
			FOR EACH ROW
			DECLARE
				t1 NUMBER;
				t2 NUMBER;
			BEGIN
			
				-- El torneo existe?
				SELECT COUNT(*) INTO t1 FROM TORNEO_FREEZEOUT
				WHERE COD_TORNEO = :new.COD_TORNEO;
				
				SELECT COUNT(*) INTO t2 FROM TORNEO_FREEROLL
				WHERE COD_TORNEO = :new.COD_TORNEO;
				
				-- es FREEZEOUT
				IF (t1 > 0) THEN
					INSERT INTO JUGADOR_PARTICIPA_FREEZEOUT(DNI_JUGADOR, COD_TORNEO, POSICION_FINAL)
					VALUES(:new.DNI_JUGADOR, :new.COD_TORNEO, :new.POSICION_FINAL);
				-- es FREEROLL
				ELSIF (t2 > 0) THEN
					INSERT INTO JUGADOR_PARTICIPA_FREEROLL(DNI_JUGADOR, COD_TORNEO, POSICION_FINAL)
					VALUES(:new.DNI_JUGADOR, :new.COD_TORNEO, :new.POSICION_FINAL);
				ELSE
					RAISE_APPLICATION_ERROR(-20001, 'El torneo no existe');
				END IF;
			END;
			/

		-- delete
		
			CREATE OR REPLACE TRIGGER t_delete_jugador_participa
			INSTEAD OF DELETE ON JUGADOR_PARTICIPA
			FOR EACH ROW
			DECLARE
				n NUMBER;
			BEGIN
			
				-- buscamos el fragmento al que se corresponde
				SELECT COUNT(*) INTO n FROM TORNEO_FREEZEOUT WHERE COD_TORNEO = :old.COD_TORNEO;
				
				IF (n > 0) THEN
					DELETE FROM JUGADOR_PARTICIPA_FREEZEOUT WHERE (DNI_JUGADOR = :old.DNI_JUGADOR) AND  (COD_TORNEO = :old.COD_TORNEO);
				ELSE
					DELETE FROM JUGADOR_PARTICIPA_FREEROLL WHERE (DNI_JUGADOR = :old.DNI_JUGADOR) AND  (COD_TORNEO = :old.COD_TORNEO);
				END IF;
			END;
			/
			
		-- update
		
			CREATE OR REPLACE TRIGGER t_update_jugador_participa
			INSTEAD OF UPDATE ON JUGADOR_PARTICIPA
			FOR EACH ROW
			DECLARE
				t NUMBER;
			BEGIN
			
				-- intentar cambiar el jugador
				IF (:new.DNI_JUGADOR != :old.DNI_JUGADOR) THEN
					RAISE_APPLICATION_ERROR(-20001, 'No se puede cambiar el DNI');
				END IF;
				
				-- intentar cambiar el torneo
				IF (:new.COD_TORNEO != :old.COD_TORNEO) THEN
					RAISE_APPLICATION_ERROR(-20001, 'No se puede cambiar el torneo');
				END IF;
				
				SELECT COUNT(*) INTO t FROM JUGADOR_PARTICIPA_FREEZEOUT
				WHERE COD_TORNEO = :old.COD_TORNEO AND DNI_JUGADOR = :old.DNI_JUGADOR;
				
				-- es FREEZEOUT
				IF (t > 0) THEN
					UPDATE JUGADOR_PARTICIPA_FREEZEOUT SET
						POSICION_FINAL = :new.POSICION_FINAL
					WHERE COD_TORNEO = :old.COD_TORNEO AND DNI_JUGADOR = :old.DNI_JUGADOR;
				-- es FREEROLL
				ELSE
					UPDATE JUGADOR_PARTICIPA_FREEROLL SET
						POSICION_FINAL = :new.POSICION_FINAL
					WHERE COD_TORNEO = :old.COD_TORNEO AND DNI_JUGADOR = :old.DNI_JUGADOR;
				END IF;
			END;
			/